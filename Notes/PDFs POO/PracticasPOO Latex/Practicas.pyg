Pedido::Pedido(Usuario_Pedido &up, Pedido_Articulo &pa, Usuario &u,const Tarjeta &t, const Fecha &f)
  : num_(n_pedidos_ + 1), tarjeta_(&t), f_pedido_(f), importe_Total_(0.0){
  // Vamos a comprobar todas la excepciones del constructor de pedido
  // Si el usuario no tiene una compra realizada, el pedido está vacio
  if (u.compra().empty()) throw Pedido::Vacio(&u);

  // Si el usuario es otro al que realiza la compra, excepción
  if (t.titular() != &u)  throw Pedido::Impostor(&u);

  // Si la tarjeta está caducada o desactivada, excepción
  if (t.caducidad() < f_pedido_)  throw Tarjeta::Caducada(t.caducidad());

  if (!t.activa())  throw Tarjeta::Desactivada();
  // Si no hay stock del articulo, excepcion.
  // Hacemos la conversión primero y luego comprobamos
  Usuario::Articulos carrito = u.compra();
  for (auto i : carrito){ // carrito del usuario
    if (ArticuloAlmacenable *AA = dynamic_cast<ArticuloAlmacenable *>(i.first)){ // hacemos conversion
      // comprobamos el stock
      if (AA->stock() < i.second){
        u.vaciar_carro();
        throw Pedido::SinStock(AA);
      }
    }
    else if (LibroDigital *LD = dynamic_cast<LibroDigital *>(i.first)){
      // Si la fecha de expiración es < a la fecha del pedido, se añade con cantidad 0
      if (LD->f_expir() < Fecha()){ // Ha expirado
        u.compra(*LD, 0); // Añadimos al pedido dicho articulo pero con la cantidad a 0
      }
    }
    else throw std::logic_error("Pedido::Pedido - Tipo de articulo no conocido");
  }
  // Comprobamos que no se quede vacio el Pedido
  if (u.compra().empty()) throw Pedido::Vacio(&u);
  // Realizamos la asociación Usuario - Pedido
  up.asocia(*this, u);

  // Vamos a pedir el articulo
  for (auto &i : u.compra()){
    importe_Total_ += i.first->precio() * i.second;
    pa.pedir(*this, *(i.first), i.first->precio(), i.second);

    // Ahora para restar el stock de dicho articulo hacemos lo mismo que arriba
    if (ArticuloAlmacenable *AA = dynamic_cast<ArticuloAlmacenable *>(i.first)){
      AA->stock() -= i.second;
    }
  }
  // Aumentamos el numero de pedidos y vaciamos el carro del usuario
  u.vaciar_carro();
  n_pedidos_++;
}
